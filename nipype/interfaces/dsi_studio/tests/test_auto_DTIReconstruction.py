# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..dsi_studio import DTIReconstruction


def test_DTIReconstruction_inputs():
    input_map = dict(
        args=dict(argstr='%s', ),
        check_btable=dict(
            argstr='--check_btable=%d',
            usedefault=True,
        ),
        decomp_fraction=dict(
            argstr='--param3=%.2f',
            requires=['decomposition'],
        ),
        decomp_m_value=dict(
            argstr='--param4=%d',
            requires=['decomposition'],
        ),
        decomposition=dict(argstr='--decomposition=1', ),
        deconv_regularization=dict(
            argstr='--param2=%.2f',
            requires=['deconvolution'],
        ),
        deconvolution=dict(argstr='--deconvolution=1', ),
        environ=dict(
            nohash=True,
            usedefault=True,
        ),
        grad_dev=dict(
            argstr='#%s',
            copyfile=True,
            position=-1,
        ),
        ignore_exception=dict(
            deprecated='1.0.0',
            nohash=True,
            usedefault=True,
        ),
        input_src_file=dict(
            argstr='--source=%s',
            copyfile=False,
            mandatory=True,
        ),
        mask=dict(
            argstr='--mask=%s',
            copyfile=False,
        ),
        num_fibers=dict(
            argstr='--num_fiber=%d',
            usedefault=True,
        ),
        odf_order=dict(usedefault=True, ),
        output_odf=dict(
            argstr='--record_odf=1',
            usedefault=True,
        ),
        terminal_output=dict(
            deprecated='1.0.0',
            nohash=True,
        ),
        thread_count=dict(
            argstr='--thread_count=%d',
            usedefault=True,
        ),
    )
    inputs = DTIReconstruction.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value
def test_DTIReconstruction_outputs():
    output_map = dict(output_fib=dict(), )
    outputs = DTIReconstruction.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
