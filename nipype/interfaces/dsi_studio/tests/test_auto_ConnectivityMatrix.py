# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..dsi_studio import ConnectivityMatrix


def test_ConnectivityMatrix_inputs():
    input_map = dict(
        args=dict(argstr='%s', ),
        connectivity=dict(argstr='--connectivity=%s', ),
        connectivity_type=dict(argstr='--connectivity_type=%s', ),
        connectivity_value=dict(argstr='--connectivity_value=%s', ),
        environ=dict(
            nohash=True,
            usedefault=True,
        ),
        fa_threshold=dict(argstr='--fa_threshold=%.2f', ),
        fiber_count=dict(
            argstr='--fiber_count=%d',
            xor=['seed_count'],
        ),
        ignore_exception=dict(
            deprecated='1.0.0',
            nohash=True,
            usedefault=True,
        ),
        initial_dir=dict(argstr='--initial_dir=%d', ),
        input_fib=dict(
            argstr='--source=%s',
            copyfile=False,
            mandatory=True,
        ),
        interpo_angle=dict(argstr='--interpo_angle=%.2f', ),
        interpolation=dict(argstr='--interpolation=%d', ),
        max_length=dict(argstr='--max_length=%d', ),
        min_length=dict(argstr='--min_length=%d', ),
        random_seed=dict(argstr='--random_seed=1', ),
        seed_count=dict(
            argstr='--seed_count=%d',
            xor=['fiber_count'],
        ),
        seed_file=dict(argstr='--seed=%s', ),
        seed_plan=dict(argstr='--seed_plan=%d', ),
        smoothing=dict(argstr='--smoothing=%.2f', ),
        step_size=dict(argstr='--step_size=%.2f', ),
        terminal_output=dict(
            deprecated='1.0.0',
            nohash=True,
        ),
        to_export=dict(argstr='--export=%s', ),
        tract_file=dict(argstr='--tract=%s', ),
        turning_angle=dict(argstr='--turning_angle=%.2f', ),
    )
    inputs = ConnectivityMatrix.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value
def test_ConnectivityMatrix_outputs():
    output_map = dict(connectivity_matrices=dict(), )
    outputs = ConnectivityMatrix.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
